// <auto-generated />
using System;
using GreenFluxAssignment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GreenFluxAssignment.Data.Migrations
{
    [DbContext(typeof(GreenFluxDbContext))]
    [Migration("20210508120327_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GreenFluxAssignment.Core.Models.ChargeStation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_ChargeStation_Id");

                    b.HasIndex("GroupId");

                    b.ToTable("ChargeStation");
                });

            modelBuilder.Entity("GreenFluxAssignment.Core.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Capacity")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Group_Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("GreenFluxAssignment.Core.Models.ChargeStation", b =>
                {
                    b.HasOne("GreenFluxAssignment.Core.Models.Group", null)
                        .WithMany("ChargeStations")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_ChargeStation_Groups_GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("GreenFluxAssignment.Core.Models.Connector", "Connectors", b1 =>
                        {
                            b1.Property<Guid>("ChargeStationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<decimal>("MaxCurrent")
                                .HasColumnType("decimal(9,2)");

                            b1.HasKey("ChargeStationId", "Id")
                                .HasName("PK_Connector_ChargeStationId_Id");

                            b1.ToTable("Connector");

                            b1.WithOwner()
                                .HasForeignKey("ChargeStationId")
                                .HasConstraintName("FK_Connector_ChargeStation_ChargeStationId");
                        });

                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("GreenFluxAssignment.Core.Models.Group", b =>
                {
                    b.Navigation("ChargeStations");
                });
#pragma warning restore 612, 618
        }
    }
}
